// Soong configs

soong_config_module_type {
    name: "disable_postrender_cleanup",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    bool_variables: ["disable_postrender_cleanup"],
    properties: ["cppflags"],
}

disable_postrender_cleanup {
    name: "disable_postrender_cleanup_defaults",
    soong_config_variables: {
        disable_postrender_cleanup: {
            cppflags: ["-DDISABLE_POSTRENDER_CLEANUP"],
        },
    },
}

soong_config_module_type {
    name: "gralloc_10_usage_bits",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    value_variables: ["additional_gralloc_10_usage_bits"],
    properties: ["cppflags"],
}

gralloc_10_usage_bits {
    name: "gralloc_10_usage_bits_defaults",
    soong_config_variables: {
        additional_gralloc_10_usage_bits: {
            cppflags: ["-DADDNL_GRALLOC_10_USAGE_BITS=%s"],
        },
    },
}

soong_config_module_type {
    name: "has_memfd_backport",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    bool_variables: ["has_memfd_backport"],
    properties: ["cppflags"],
}

has_memfd_backport {
    name: "has_memfd_backport_defaults",
    soong_config_variables: {
        has_memfd_backport: {
            cppflags: ["-DHAS_MEMFD_BACKPORT"],
        },
    },
}

soong_config_module_type {
    name: "vendor_init",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    value_variables: ["target_init_vendor_lib"],
    properties: ["whole_static_libs"],
}

vendor_init {
    name: "vendor_init_defaults",
    soong_config_variables: {
        target_init_vendor_lib: {
            whole_static_libs: ["%s"],
        },
    },
}

soong_config_module_type {
    name: "target_process_sdk_version_overrides",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    value_variables: ["target_process_sdk_version_override"],
    properties: ["cppflags"],
}

target_process_sdk_version_overrides {
    name: "process_sdk_version_overrides_defaults",
    soong_config_variables: {
        target_process_sdk_version_override: {
            cppflags: ["-DSDK_VERSION_OVERRIDES=\"%s\""],
        },
    },
}

soong_config_module_type {
    name: "camera_parameter_library",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    value_variables: ["uses_camera_parameter_lib"],
    properties: ["whole_static_libs"],
}

camera_parameter_library {
    name: "camera_parameter_library_defaults",
    soong_config_variables: {
        uses_camera_parameter_lib: {
            whole_static_libs: ["%s"],
        },
    },
}

soong_config_module_type {
    name: "stagefright_qcom_legacy",
    module_type: "cc_defaults",
    config_namespace: "guaiyihuGlobalVars",
    bool_variables: ["uses_qcom_bsp_legacy"],
    properties: ["cppflags"],
}

stagefright_qcom_legacy {
    name: "stagefright_qcom_legacy_defaults",
    soong_config_variables: {
        uses_qcom_bsp_legacy: {
            cppflags: ["-DQCOM_BSP_LEGACY"],
        },
    },
}

bootstrap_go_package {
    name: "soong-guaiyihu-generator",
    pkgPath: "guaiyihu/soong/generator",
    deps: [
        "blueprint",
        "blueprint-pathtools",
        "soong",
        "soong-android",
        "soong-shared",
    ],
    srcs: [
        "generator/generator.go",
        "generator/variables.go",
    ],
    pluginFor: ["soong_build"],
}

guaiyihu_generator {
    name: "generated_kernel_includes",

    // The headers make command
    cmd: "$(PATH_OVERRIDE_SOONG) $(KERNEL_MAKE_CMD) $(KERNEL_MAKE_FLAGS) -C $(TARGET_KERNEL_SOURCE) O=$(KERNEL_BUILD_OUT_PREFIX)$(genDir) ARCH=$(KERNEL_ARCH) $(KERNEL_CROSS_COMPILE) headers_install",

    // Directories that can be imported by a cc_* module generated_headers property
    export_include_dirs: ["usr/include"],

    // Sources for dependency tracking
    dep_root: "$(TARGET_KERNEL_SOURCE)",
    dep_files: [ "Makefile", "include/**/*", "arch/$(KERNEL_ARCH)/include/**/*"],
}

cc_library_headers {
    name: "generated_kernel_headers",
    generated_headers: ["generated_kernel_includes"],
    export_generated_headers: ["generated_kernel_includes"],
    vendor_available: true,
    recovery_available: true,
}